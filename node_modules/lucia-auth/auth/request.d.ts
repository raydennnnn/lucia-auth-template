import { Cookie } from "./cookie.js";
import type { Auth, Session, User } from "./index.js";
export type LuciaRequest = {
    method: string;
    url: string;
    headers: {
        origin: string | null;
        cookie: string | null;
    };
};
export type RequestContext = {
    request: LuciaRequest;
    setCookie: (cookie: Cookie) => void;
};
export type Middleware<Args extends any[] = any> = (...args: [...Args, "DEV" | "PROD"]) => RequestContext;
export declare class AuthRequest<A extends Auth = any> {
    private auth;
    private context;
    constructor(auth: A, context: RequestContext);
    private validatePromise;
    private validateUserPromise;
    storedSessionId: string | null;
    setSession: (session: Session | null) => void;
    private setSessionCookie;
    validate: () => Promise<Session | null>;
    validateUser: () => Promise<{
        user: null;
        session: null;
    } | {
        user: User;
        session: Session;
    }>;
}
