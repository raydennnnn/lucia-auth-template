import { debug } from "../utils/debug.js";
export class AuthRequest {
    auth;
    context;
    constructor(auth, context) {
        this.auth = auth;
        this.context = context;
        try {
            this.storedSessionId = auth.parseRequestHeaders(context.request);
        }
        catch (e) {
            this.storedSessionId = null;
        }
    }
    validatePromise = null;
    validateUserPromise = null;
    storedSessionId;
    setSession = (session) => {
        const sessionId = session?.sessionId ?? null;
        if (this.storedSessionId === sessionId)
            return;
        this.validateUserPromise = null;
        this.validatePromise = null;
        this.setSessionCookie(session);
    };
    setSessionCookie = (session) => {
        const sessionId = session?.sessionId ?? null;
        if (this.storedSessionId === sessionId)
            return;
        this.storedSessionId = sessionId;
        try {
            this.context.setCookie(this.auth.createSessionCookie(session));
            if (session) {
                debug.request.notice("Session cookie stored", session.sessionId);
            }
            else {
                debug.request.notice("Session cookie deleted");
            }
        }
        catch (e) {
            // ignore
        }
    };
    validate = async () => {
        if (this.validatePromise) {
            debug.request.info("Using cached result for session validation");
            return this.validatePromise;
        }
        this.validatePromise = new Promise(async (resolve) => {
            if (!this.storedSessionId) {
                return resolve(null);
            }
            try {
                const session = await this.auth.validateSession(this.storedSessionId);
                if (session.fresh) {
                    this.setSessionCookie(session);
                }
                return resolve(session);
            }
            catch (e) {
                this.setSessionCookie(null);
                return resolve(null);
            }
        });
        return this.validatePromise;
    };
    validateUser = async () => {
        const resolveNullSession = (resolve) => {
            this.setSessionCookie(null);
            return resolve({
                user: null,
                session: null
            });
        };
        if (this.validateUserPromise) {
            debug.request.info("Using cached result for session validation");
            return this.validateUserPromise;
        }
        this.validateUserPromise = new Promise(async (resolve) => {
            if (!this.storedSessionId) {
                return resolveNullSession(resolve);
            }
            try {
                const { session, user } = await this.auth.validateSessionUser(this.storedSessionId);
                if (session.fresh) {
                    this.setSessionCookie(session);
                }
                return resolve({ session, user });
            }
            catch (e) {
                return resolveNullSession(resolve);
            }
        });
        return this.validateUserPromise;
    };
}
