/// <reference types="node" />
import type { IncomingMessage, OutgoingMessage, ServerResponse } from "node:http";
import { type Middleware, type RequestContext } from "../index.js";
import type { Request as ExpressRequest, Response as ExpressResponse } from "express";
import { CookieAttributes } from "../utils/cookie.js";
export declare const node: () => Middleware<[IncomingMessage, OutgoingMessage]>;
export declare const express: () => Middleware<[ExpressRequest, ExpressResponse]>;
type SvelteKitRequestEvent = {
    request: Request;
    cookies: {
        set: (name: string, value: string, options?: CookieAttributes) => void;
    };
};
export declare const sveltekit: () => Middleware<[SvelteKitRequestEvent]>;
type AstroAPIContext = {
    request: Request;
    cookies: {
        set: (name: string, value: string, options?: CookieAttributes) => void;
    };
};
export declare const astro: () => Middleware<[AstroAPIContext]>;
type QwikRequestEvent = {
    request: Request;
    cookie: {
        set: (name: string, value: string, options?: CookieAttributes) => void;
    };
};
export declare const qwik: () => Middleware<[QwikRequestEvent]>;
export declare const lucia: () => Middleware<[RequestContext]>;
export declare const web: () => Middleware<[Request, Headers | Response]>;
type NextJsAppServerContext = {
    cookies: () => {
        set?: (name: string, value: string, options?: CookieAttributes) => void;
        get: (name: string) => {
            name: string;
            value: string;
        } | undefined;
    };
    request?: Request;
};
type NextJsPagesServerContext = {
    req: IncomingMessage;
    res?: OutgoingMessage;
} | {
    req: IncomingMessage;
    headers: Headers;
} | {
    req: IncomingMessage;
    response: Response;
};
type NextRequest = Request & {
    cookies: {
        set: (name: string, value: string) => void;
        get: (name: string) => {
            name: string;
            value: string;
        } | undefined;
    };
};
export declare const nextjs: () => Middleware<[
    NextJsPagesServerContext | NextJsAppServerContext | {
        request: NextRequest;
    }
]>;
type H3Event = {
    node: {
        req: IncomingMessage;
        res: ServerResponse;
    };
};
export declare const h3: () => Middleware<[H3Event]>;
export {};
